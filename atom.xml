<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Pluralia Tantrum</title>
    <link href="http://patrickdelliott.com/atom.xml" rel="self" />
    <link href="http://patrickdelliott.com" />
    <id>http://patrickdelliott.com/atom.xml</id>
    <author>
        <name>Patrick Elliott</name>
        <email>patrick.d.elliott@gmail.com</email>
    </author>
    <updated>2018-10-22T00:00:00Z</updated>
    <entry>
    <title>Decentralize your personal website</title>
    <link href="http://patrickdelliott.com/posts/2018-10-22-decentralize.html" />
    <id>http://patrickdelliott.com/posts/2018-10-22-decentralize.html</id>
    <published>2018-10-22T00:00:00Z</published>
    <updated>2018-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Like many academics and developers, my personal website is a static site<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> hosted by GitHub pages, aliased to my personal domain. In fact, you can see the entire source for the site, including drafts for any posts I might happen to be working on <a href="https://github.com/patrl/patrl.github.io">here</a>. As I started getting interested in the <em>decentralized web</em><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>, I decided to experiment with publishing this site via contemporary peer-to-peer protocols - which means, of course, this site will persist regardless of what happens to GitHub’s central servers.</p>
<p><a href="https://dat-project.org">Dat</a> and <a href="https://ipfs.io">IPFS</a> are two of the most prominent protocols at the heart of the decentralization movement, which aims to develop alternatives to huge cloud-based companies like google and facebook, and return power and control over information to the user by abandoning the traditional client/server archiecture. In a decentralized world, in principle there are only peers.</p>
<p>Dat and IPFS (which stands for Inter-Planetary File System) have relatively similar aims – they both provide a protocol and tooling for sharing content-addressable information between peers, with no single point of failure. Dat was originally developed as a means for scientists to share large datasets, but the ecosystem has however grown quite a bit beyond this initial remit – see, e.g., <a href="https://beakerbrowser.com/">the Beaker Browser</a>. IPFS on the other hand was pretty much always intended as a distributed alternative to the web, and there’s already an <a href="https://github.com/ipfs-shipyard/ipfs-companion">extension</a> to integrate modern browsers with the IPFS protocol. There are of course other technologies on the scene, such as <a href="https://www.scuttlebutt.nz/">scuttlebutt</a> (which I’ll probably write about some other time), and Tim Berners-Lee’s new <a href="https://solid.mit.edu/">solid</a> platform, but for now dat and IPFS seem the most mature.</p>
<p>This post is a record of how I publish my <a href="https://patrickdelliott.com">homepage</a> via IPFS at <a href="https://ipfs.io/ipns/patrickdelliott.com">https://ipfs.io/ipns/patrickdelliott.com</a><a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> and dat at <a href="dat://patrl.hashbase.io">dat://patrl.hashbase.io</a>. There wasn’t any real necessity to publish this site on the decentralized web - after all, the number of users who are going to visit this page via dat/ipfs is probably vanishingly small – but I thought it would be a fun experiment, and an opportunity to learn a little more about emerging peer-to-peer technologies, which I think are independently quite exciting.</p>
<section id="ipfs" class="level2">
<h2>IPFS</h2>
<p>First, I’ll talk through how I publish my site on the IPFS network to <code>/ipns/patrickdelliott.com</code> via <a href="https://docs.ipfs.io/guides/concepts/dnslink/">DNSLink</a>.</p>
<section id="running-an-ipfs-node-locally" class="level3">
<h3>Running an IPFS node locally</h3>
<p>Before doing anything else, I needed to install ipfs, initialize the repository, and start the ipfs daemon - you can follow the instructions <a href="https://docs.ipfs.io/introduction/usage">here</a>.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> After starting the ipfs daemon, you can check whether or not you’re connected to the network by running <code>ipfs
swarm peers</code>, which should return the ipfs addresses of your peers.</p>
</section>
<section id="publishing-on-ipfs" class="level3">
<h3>Publishing on IPFS</h3>
<p>First, you need to retrieve the peer ID of your locally running ipfs node, by running the following command:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="va">peerid=$(</span><span class="ex">ipfs</span> id -f<span class="st">&quot;&lt;id&gt;&quot;</span><span class="va">)</span></span></code></pre></div>
<p>On my local machine, the source for my website can be found at <code>~GitHub/patrl.github.io/_site/</code>. I ran the following commands, which adds the website to IPFS and retrieves the hash of the directory root:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="va">siteloc=$HOME</span>/GitHub/patrl.github.io/_site</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="va">dirhash=$(</span><span class="ex">ipfs</span> add -r <span class="va">$(</span><span class="ex">siteloc</span><span class="va">)</span>/ <span class="kw">|</span> <span class="fu">grep</span> <span class="va">$(</span><span class="ex">siteloc</span><span class="va">)</span>$ <span class="kw">|</span> <span class="fu">cut</span> -d<span class="st">&quot; &quot;</span> -f2<span class="va">)</span></span></code></pre></div>
<p>Finally, we publish the directory to our node’s <code>ipns</code> entry by running the following command:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ex">ipfs</span> name publish <span class="va">$dirhash</span></span></code></pre></div>
<p>It should now be possible to access the site via, e.g., a public gateway such as <a href="https://ipfs.io">https://ipfs.io</a>. Even without running an IPFS node, you can access my site over the IPFS network by navigating to <a href="https://ipfs.io/ipns/patrickdelliott.com">https://ipfs.io/ipns/patrickdelliott.com</a>.</p>
</section>
<section id="dnslink" class="level3">
<h3>DNSLink</h3>
<p>We can go a step further and ensure that someone running a local IPFS node with the <a href="https://github.com/ipfs-shipyard/ipfs-companion">IPFS companion</a> browser extension is automatically redirected to view the site on the IPFS network. This can be achieved by adding a DNS <code>TXT</code> record via your provider (I use cloudflare) with the following content, pointing at your base url (in this case, <code>patrickdelliott.com</code>):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="va">dnslink=</span>/ipns/<span class="va">$peerid</span></span></code></pre></div>
</section>
</section>
<section id="dat" class="level2">
<h2>Dat</h2>
<p>Before talking about dat, a little background: what got me started with this whole endeavour was an (in hindsight, overly ambitious) attempt to migrate this site from GitHub pages to a personal web server, and publish to both <a href="https://patrickdelliott.com">https://patrickdelliott.com</a> and <a href="dat://patrickdelliott.com">dat://patrickdelliott.com</a> via <a href="https://github.com/beakerbrowser/homebase">homebase</a>. I managed to get this working after jumping through quite a few hoops, but found that homebase wouldn’t reliably sync with my website’s dat repository, and the whole setup required too much manual intervention to be really worthwhile. I’ll take another look at homebase once it’s a bit more mature.</p>
<p>In the meantime, I decided that a much more manageable solution would be to continue to host my site at <code>https://patrickdelliott.com</code>, while simultaneously syncing it with a dat repository pinned at <a href="https://hashbase.io">hashbase.io</a> - <a href="dat://patrl.hashbase.io">dat://patrl.hashbase.io</a>.</p>
<section id="installing-dat" class="level3">
<h3>Installing <code>dat</code></h3>
<p>The first step is to install the <code>dat</code> cli tool, by following the instructions <a href="https://docs.datproject.org/install">here</a>.</p>
</section>
<section id="creating-a-dat-repository" class="level3">
<h3>Creating a <code>dat</code> repository</h3>
<p>Next, we want to turn our published site into a dat repo. Ordinarily, this would be as simple as running <code>dat init</code> in relevant directory, but things are a bit more complicated with a static website - ordinarily, my site gets built into <code>$HOME/GitHub/patrl.github.io/_site</code>, but every time the site gets rebuilt, this entire directory gets wiped, including any metadata generated by <code>dat</code>. This would mean I’d effectively have to initialize a new dat repo with a new hash every time the site gets rebuilt, and we don’t want that.</p>
<p>Instead, I did the following: first, I built the site and copied it into <code>$HOME/dat/patrickdelliott.com</code>. I then navigated to this directory and ran <code>dat
init</code> to create the dat repository. Next, I went to <a href="https://hashbase.io">https://hashbase.io</a> and followed the instructions there to pin my dat repo to <a href="dat://patrl.hashbase.io">dat://patrl.hashbase.io</a>. I then navigated to the local and run <code>dat share --watch false</code> to share the dat repo to the pinning service for the first time.</p>
<p>Whenever I want to update the dat repo and sync with hashbase, I run a script called <code>deploy-dat</code>, from my site’s git repo. This wipes everything from the local dat repo, <em>except</em> for the dat metadata, and copies in the newly built site, before syncing with the pinning service.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="fu">find</span> ~/dat/patrickdelliott.com/ -mindepth 1 -maxdepth 1 \! <span class="dt">\(</span> -name .dat -o -name dat.json <span class="dt">\)</span> -exec rm -rf <span class="st">&#39;{}&#39;</span> <span class="dt">\;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="fu">cp</span> -a ~/GitHub/patrl.github.io/_site/. ~/dat/patrickdelliott.com/.</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="bu">cd</span> ~/dat/patrickdelliott.com</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="ex">dat</span> sync --watch false</span></code></pre></div>
</section>
</section>
<section id="resources" class="level1">
<h1>Resources</h1>
<dl>
<dt><a href="https://ipfs.io/">IPFS</a></dt>
<dd>homepage of the InterPlanetary Filesystem
</dd>
<dt><a href="https://github.com/ipfs-shipyard/ipfs-companion">the IPFS browser extension</a></dt>
<dd>use this to access the IPFS network via a modern browser.
</dd>
<dt><a href="https://datproject.org/">Dat Project</a></dt>
<dd>homepage of the dat project
</dd>
<dt><a href="https://beakerbrowser.com/">Beaker Browser</a></dt>
<dd>a browser for the decentralized web, supporting both dat and IPFS.
</dd>
<dt><a href="https://github.com/beakerbrowser/homebase">Homebase</a></dt>
<dd>An alternative tool for publishing on the decentralized web, by the beaker devs.
</dd>
</dl>
</section>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>I build my site using the excellent haskell static-site generator <a href="https://jaspervdj.be/hakyll/">hakyll</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>See also: <em>distributed web</em>, <em>immutable web</em>, <em>permanent web</em>, etc.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>You can substitute <a href="https://ipfs.io">https://ipfs.io</a> with any public IPFS gateway here, such as <a href="https://cloudflare-ipfs.com">https://cloudflare-ipfs.com</a>.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>On the off-chance you happen to be another NixOS user, this is as simple as adding the following line to your <code>configuration.nix</code>!</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">services.enable.ifps</span> = true<span class="kw">;</span></span></code></pre></div>
<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>A note on if-questions</title>
    <link href="http://patrickdelliott.com/posts/2016-10-15-ifQs.html" />
    <id>http://patrickdelliott.com/posts/2016-10-15-ifQs.html</id>
    <published>2016-10-15T00:00:00Z</published>
    <updated>2016-10-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>If</em>-clauses are weird. They have a couple of prominent uses: as the antecedent clause in a conditional <em>if…then…</em> statement (see (1)), and as an embedded question (<a href="#1">1</a>).</p>
<ol>
<li><span id="1"></span>If Britta is taking this class, then I’m not.</li>
<li><span id="2"></span>Jeff asked if Britta is taking this class.</li>
</ol>
<p>Here, I’m interested in the latter cases, which I’ll call <em>if</em>-questions. Their distribution is constrained in some interesting ways. Under <em>rogative</em><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> predicates, <em>if</em>-questions seem, more-or-less, to be in free variation with <em>whether</em>-questions.</p>
<ol>
<li>Jeff {wondered|asked} {if|whether} Britta is taking this class.</li>
</ol>
<p>Elsewhere however, the similarity between <em>whether</em>-questions and <em>if</em>-questions breaks down. Unlike <em>whether</em>-questions (and interestingly, much like <em>that</em>-clauses), <em>if</em>-questions aren’t permitted as the complement of a preposition.</p>
<ol>
<li>Britta thought about {whether|if|that} she should attend class.</li>
</ol>
<p>Furthermore, <em>if</em>-questions generally seem pretty bad as subjects, unlike both <em>whether</em>-questions and <em>that</em>-clauses, which are attested, under certain conditions, in this environment.</p>
<ol>
<li>{Whether|*if} Jeff attends depends on whether Britta attends.</li>
<li>That Britta is attending class worries Jeff.</li>
</ol>
<p>These facts are clearly telling us something interesting about the syntactic properties of <em>if</em>-questions vis a vis other varieties of embedded clause, maybe specifically about their case properties. I don’t want to speculate more about this here.</p>
<p>Moving on, <em>if</em>-questions show some extremely interesting behaviour under <em>responsive</em> predicates, such as <em>know</em> and <em>admit</em>. These facts were first uncovered and analysed in a 2001 paper by <span class="citation" data-cites="adger_syntax_2001">Adger &amp; Quer (2001)</span><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>, who claim that <em>if</em>-questions exhibit polarity sensitivity under responsive predicates. The judgements are subtle, but the following contrast is fairly illustrative.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<ol>
<li>*?Jeff told me if Britta left.</li>
<li>Jeff didn’t tell me if Britta left.</li>
</ol>
<p>Adger &amp; Quer develop a theory tailored to derive this kind of contrast. I have some issues with their account, but I’ll leave that for another post (maybe!). For the time being I just want to note that the predicate <em>imagine</em> poses an interesting problem for the distribution of <em>if</em>-clauses, and its certainly outside of the scope of Adger &amp; Quer’s account. First, note that <em>imagine</em> doesn’t embed <em>whether</em>-questions at all (<a href="#9">9</a>). The polarity of the matrix clause doesn’t seem to make a difference (<a href="#10">10</a>). However, when the matrix clause is an imperative (<a href="#11">11</a>), or otherwise a request directed at the addressee (<a href="#12">12</a>), an embedded <em>if</em>-question is licensed, despite the fact that an embedded <em>whether</em>-question still isn’t.</p>
<ol>
<li><span id="9"></span>Jeff imagined {whether|if|that} Britta left.</li>
<li><span id="10"></span>Jeff never imagined {whether|if|that} Britta left.</li>
<li><span id="11"></span>Imagine {*whether|if|that} Britta left.</li>
<li><span id="12"></span>Can you imagine {*whether|if|that} Britta left.</li>
</ol>
<p>Adger &amp; Quer of course don’t consider this kind of data, but it’s difficult to see how one could extend their account to this, since as far as I can see, they predict <em>if</em>-questions to be licensed in a subset of the environments that <em>whether</em>-questions are.</p>
<p>Zooming out a bit, how the hell do kids acquire these kinds of subtle distributional facts, given that <em>whether</em>-questions and <em>if</em>-questions seem, roughly, to mean the same thing?</p>
<p>More selectional puzzles soon! And, as always, my deepest apologies to the non-linguists.</p>
<section id="references" class="level1 unnumbered">
<h1>References</h1>
<div id="refs" class="references" role="doc-bibliography">
<div id="ref-adger_syntax_2001">
<p>Adger, David &amp; Josep Quer. 2001. The syntax and semantics of unselected embedded questions. <em>Language</em> 77(1). 107–133. <a href="http://www.jstor.org/stable/3087030">http://www.jstor.org/stable/3087030</a>.</p>
</div>
<div id="ref-heimThesis">
<p>Heim, Irene Roswitha. 1982. The semantics of definite and indefinite noun phrases. PhD thesis.</p>
</div>
</div>
</section>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><span class="citation" data-cites="heimThesis">Heim (1982)</span> classifies predicates that embed questions, broadly, as either <em>rogative</em> or <em>responsive</em>. <em>Rogative</em> predicates are those which may embed interrogative clauses, but not declaratives, like <em>wonder</em> and <em>ask</em>. <em>Responsive</em> predicates on the other hand may embed both interrogatives and declaratives, such as <em>know</em> and <em>tell</em>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>This is behind a paywall (<a href="https://www.jstor.org/stable/3087030">https://www.jstor.org/stable/3087030</a>), but you can apparenly download the .pdf <a href="http://filcat.uab.cat/clt/publicacions/reports/pdf/GGT-99-2.pdf">here</a> for free.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>This isn’t much discussed much by <span class="citation" data-cites="adger_syntax_2001">Adger &amp; Quer (2001)</span>, but (8a) is almost certainly acceptable under the reading that can be paraphrased as “If Britta left, then Jeff told me (that Britta left)”. I assume that this is a possible analysis of (8a), since <em>tell</em> independently allows Null Complement Anaphora, as in “Britta left. Jeff told me.”<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>

</feed>
