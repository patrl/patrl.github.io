---
title: Update semantics via the state monad
author: Patrick D. Elliott
toc: true
lang: english
tags:
date: 24.01.2019
---

In the following, I'll show how to formalizea particular conception of /update semantics/ -- a semantic theory
tailored to account for /presupposition projection/ \cite{heim1983} --
using Haskell's ~StateT~ monad transformer. This will help us end up with a
clear-eyed view of the relation between `classical` meanings for propositional
connectives, such as /and/, /or/, /if...then.../ etc., and the (quite different)
meanings posited in an update semantics. I'll be working towards a system in
which the propositional connectives can be straightforwardly lifted into their
dynamic counterparts. Spoiler: we're not going to quite succeed, but I'll
suggest a possible fix.

* Background on presupposition projection

If one were to ask a layperson the question: what is language /for/? The chances
are that they would answer with something like the following: language is used
to convey information. To give an example, bordering on the trivial, if we're
wondering whether or not Hubert smokes, and a speaker utters the sentence
"Hubert doesn't smoke", and we trust her to be truthful, then we come to believe something new -- namely, /that
Hubert doesn't smoke/, from which we can infer that /someone doesn't smoke/,
etc.

To say that language can be used informatively seems, of course, so trivial that
it borders on a truism. Somewhat more surprisingly, some sentences seem to
require certain information to be /redundant/ in a given context to be usable.
Consider for example, the sentence "Hubert stopped smoking". If a speaker utters
this sentence in a context where we have no idea whether Hubert ever smokes, it
seems...odd. The intuition here is that she seems to be /taking for granted/ that
we know that Hubert smoked in the past. If it so happens that we /do/ believe
that Hubert smoked in the past, then we learn something new -- namely, /that
Hubert doesn't smoke now/. Linguists and philosophers call the meaning component
that is required to be redundant the /presupposition/ of the sentence, and the
information conveyed by a sentence, its /assertion/.

One of the hallmarks of /presuppositions/ is the fact that they /project/ in
certain environments. \citealt{karttunen1973}, the \emph{locus classicus} for presupposition
projection in complex sentences, observes non-trivial projection patterns in
complex sentences involving logical operators, such as negation, conjunction,
and disjunction. What do we mean by this? Well, we know that "Hubert
stopped smoking" asserts that /Hubert doesn't smoke now/, and presupposes that
/Hubert did smoke in the past/. Now consider the assertion/presupposition of "Hubert
didn't stop smoking":

\[
\begin{aligned}
&\text{Hubert stopped smoking}\\
&\textit{assertion} &= \text{Hubert doesn't smoke now}\\
&\textit{presupposition} &= \text{Hubert smoked in the past}
\end{aligned}
\]

\[
\begin{aligned}
&\text{Hubert didn't stop smoking}\\
&\textit{assertion}  &= \text{Hubert smokes now}\\
&\textit{presupposition} &= \text{Hubert smoked in the past}
\end{aligned}
\]

Note that the assertion is negated - just as we expect - but the presupposition
of the negative sentence is the same as the presupposition of the positive
sentence. More generally, a sentence of the form
\(\text{not}\,ϕ\) presupposes whatever \(ϕ\) presupposes.

Moving on to conjunction, Karttunen observed that the presupposition of a
conjunctive sentence of the form \(ϕ \text{and} ψ\), depends on whether \(ϕ\)
entails the presupposition of \(ψ\) -- in other words, on whether or not the
presupposition of the second conjunct is redundant in light of the first conjunct.

\[
\begin{aligned}
&\text{Hubert stopped smoking}\\
&\textit{assertion} &= \text{Hubert doesn't smoke now}\\
&\textit{presupposition} &= \text{Hubert smoked in the past}
\end{aligned}
\]

\[
\begin{aligned}
&\text{Hubert did smoke and Hubert stopped smoking}\\
&\textit{assertion}  &= \text{Hubert smoked in the past and doesn't smoke now}\\
&\textit{presupposition} &= \text{N/A}
\end{aligned}
\]

A theory that is tailored to account for presupposition is Irene Heim's update
semantics. In the next section, I'll show how I implemented update semantics in
Haskell, using the ~StateT~ monad transformer.

* The basic implementation







* References
